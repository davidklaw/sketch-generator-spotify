// sketch.scriptPath is an absolute path from ~ to the parent directory of the .sketchplugin
var pluginPath = sketch.scriptPath.substring(0, sketch.scriptPath.lastIndexOf('/'));

var baseUrl = 'https://api.spotify.com/v1'
var el = getArray();

if (el != null) {
  var alert = createAlertBase('spotify');

  alert.setMessageText("Options");
  alert.setInformativeText("Customize the layers to map to.");

  var responseCode = alert.runModal();

  handleAlertResponse(alert, responseCode, el);
}

function handleAlertResponse(alert, responseCode, el) {
  // The OK button will return a code of 1000
  // Cancel is 1001.
  // The codes are odd. They are based off the button's position in the view.
  // They are explain in more detail in the NSAlert docs
  // https://developer.apple.com/library/mac/documentation/cocoa/reference/applicationkit/classes/NSAlert_Class/Reference/Reference.html#//apple_ref/doc/constant_group/Button_Return_Values
  // There's no anchor to it, but search for "Button Return Values" in the page
  if (responseCode == "1000") {

    var opts = {
      query: valAtIndex(alert, 1),
    }

    var query = opts.query.replace(' ', '+');

    var url = baseUrl + '/search?q=' + query + '&type=track';

    sketch.doc.showMessage('Retrieving random tracks from Spotify...');

    createAndPlaceContent(url, el);
  }
}

// Creates a new bitmap image and adds it to the Layer group
function addImgToCanvas(el, img, layerName) {
  var imageCollection = el.documentData().images();
  var imageData = [imageCollection addImage:img convertColourspace:false]
  var newImage = [[MSBitmapLayer alloc] initWithImage:imageData parentFrame:el.frame() name:layerName];
  el.addLayers([newImage]);
  return newImage;
}

function createAndPlaceContent(url, el) {
  var res = get(url);
  var json = JSON.parse(NSString.alloc().initWithData_encoding(res, NSUTF8StringEncoding));
  
  if (json) {
    var tracks = json.tracks.items;
    var num_of_tracks = el.count();

    log("Applying data to " + num_of_tracks + " items.")

    for (var i=0; i < num_of_tracks; i++) {
      var track_data = tracks[i];

      layer_group = el[i];
        
      for (var j=0; j < layer_group.layers().count(); j++) {
        var current_layer = layer_group.layers().objectAtIndex(j);
        var key = current_layer.name();

        var string_value = byString(track_data, key);

        if (string_value) {
          if (current_layer.className() == 'MSTextLayer') {
            [current_layer setStringValue: String(string_value)];
            [current_layer adjustFrameToFit];
          }
          else if (current_layer.className() == 'MSShapeGroup') {
            var res = get(string_value);
            var img = NSImage.alloc().initWithData(res);
            
            // If the layer we're working with is within a smart object
            // then add this image to the document outside of that.
            // Otherwise, set it as a pattern.

            if (doc.documentData().layerSymbols().isLayerContainedByAnySymbol(current_layer))) {
              addImgToCanvas(current_layer, img, "cover");
            } else {
              current_layer.style().fills().firstObject().setFillType(4);
              current_layer.style().fills().firstObject().setPatternImage(img);
              current_layer.style().fills().firstObject().setPatternFillType(1);
            }
          }
        }
      }
    }
  }
}

function inSymbol(layer) {
  if (layer.parentGroup() == nil) {
    log("Done")
    return false;
  }
  
  parentGroup = layer.parentGroup();

  symbols = doc.documentData().layerSymbols()
  
  log("Checking parent against " + symbols + " symbols.")
  
  for (var i=0; i < symbols.length; i++) {
    log("Checking parent for symbol match")
    symbol = symbols[i];
    if (symbol == parentGroup) {
      return true;
    }
  }
}

// Creates an alert using the CocoaScript COSAlertWindow class
function createAlertBase(service) {
  var alert = COSAlertWindow.new();

  var icon = NSImage.alloc().initByReferencingFile(pluginPath + '/lib/' + service + '.icns');
  alert.setIcon(icon);

  alert.addTextLabelWithValue("Search");
  alert.addTextFieldWithValue("Search");

  alert.addButtonWithTitle('OK');
  alert.addButtonWithTitle('Cancel');

  return alert;
}

function getArray() {
  var app = NSApplication.sharedApplication();
  var el = null;
  var s = sketch.selection;

  if (s.count() == 0) {
    app.displayDialog_withTitle("You'll need to select a group or you can select nothing and we'll add the image to the current page.", "Invalid Selection");
  } else {
    return s;
  }
}

// A quick way to get the value of text fields in the alerts
function valAtIndex (view, index) {
  return view.viewAtIndex(index).stringValue()
}

function byString(o, s) {
    s = s.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
    s = s.replace(/^\./, '');           // strip a leading dot
    var a = s.split('.');
    while (a.length) {
        var n = a.shift();
        if (n in o) {
            o = o[n];
        } else {
            return;
        }
    }
    return o;
}

// Make an HTTP GET Request to url.
function get(url) {
  var request = NSURLRequest.requestWithURL(NSURL.URLWithString(url));
  var response = NSURLConnection.sendSynchronousRequest_returningResponse_error(request, null, null);
  return response;
}